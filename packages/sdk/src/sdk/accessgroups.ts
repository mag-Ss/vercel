/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accessGroupsCreate } from "../funcs/accessGroupsCreate.js";
import { accessGroupsDelete } from "../funcs/accessGroupsDelete.js";
import { accessGroupsList } from "../funcs/accessGroupsList.js";
import { accessGroupsListMembers } from "../funcs/accessGroupsListMembers.js";
import { accessGroupsListProjects } from "../funcs/accessGroupsListProjects.js";
import { accessGroupsRead } from "../funcs/accessGroupsRead.js";
import { accessGroupsUpdate } from "../funcs/accessGroupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { AccessGroup } from "../models/components/accessgroup.js";
import {
  CreateAccessGroupRequest,
  CreateAccessGroupResponseBody,
} from "../models/operations/createaccessgroup.js";
import { DeleteAccessGroupRequest } from "../models/operations/deleteaccessgroup.js";
import {
  ListAccessGroupMembersRequest,
  ListAccessGroupMembersResponseBody,
} from "../models/operations/listaccessgroupmembers.js";
import {
  ListAccessGroupProjectsRequest,
  ListAccessGroupProjectsResponseBody,
} from "../models/operations/listaccessgroupprojects.js";
import {
  ListAccessGroupsRequest,
  ListAccessGroupsResponseBody,
} from "../models/operations/listaccessgroups.js";
import {
  ReadAccessGroupRequest,
  ReadAccessGroupResponseBody,
} from "../models/operations/readaccessgroup.js";
import { UpdateAccessGroupRequest } from "../models/operations/updateaccessgroup.js";
import { unwrapAsync } from "../types/fp.js";

export class AccessGroups extends ClientSDK {
  /**
   * Reads an access group
   *
   * @remarks
   * Allows to read an access group
   */
  async read(
    request: ReadAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<ReadAccessGroupResponseBody> {
    return unwrapAsync(accessGroupsRead(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an access group
   *
   * @remarks
   * Allows to update an access group metadata
   */
  async update(
    request: UpdateAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<AccessGroup> {
    return unwrapAsync(accessGroupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an access group
   *
   * @remarks
   * Allows to delete an access group
   */
  async delete(
    request: DeleteAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(accessGroupsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List members of an access group
   *
   * @remarks
   * List members of an access group
   */
  async listMembers(
    request: ListAccessGroupMembersRequest,
    options?: RequestOptions,
  ): Promise<ListAccessGroupMembersResponseBody> {
    return unwrapAsync(accessGroupsListMembers(
      this,
      request,
      options,
    ));
  }

  /**
   * List access groups for a team, project or member
   *
   * @remarks
   * List access groups
   */
  async list(
    request: ListAccessGroupsRequest,
    options?: RequestOptions,
  ): Promise<ListAccessGroupsResponseBody> {
    return unwrapAsync(accessGroupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates an access group
   *
   * @remarks
   * Allows to create an access group
   */
  async create(
    request: CreateAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<CreateAccessGroupResponseBody> {
    return unwrapAsync(accessGroupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List projects of an access group
   *
   * @remarks
   * List projects of an access group
   */
  async listProjects(
    request: ListAccessGroupProjectsRequest,
    options?: RequestOptions,
  ): Promise<ListAccessGroupProjectsResponseBody> {
    return unwrapAsync(accessGroupsListProjects(
      this,
      request,
      options,
    ));
  }
}
